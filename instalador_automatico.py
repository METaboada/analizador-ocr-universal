#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Instalador Autom√°tico de Dependencias
Para el Analizador OCR Universal
"""

import subprocess
import sys
import os
import tkinter as tk
from tkinter import messagebox
import importlib.util
import urllib.request
import tempfile

class InstaladorDependencias:
    def __init__(self):
        self.dependencias_python = [
            ('PyPDF2', 'PyPDF2'),
            ('openpyxl', 'openpyxl'), 
            ('pytesseract', 'pytesseract'),
            ('pdf2image', 'pdf2image'),
            ('Pillow', 'PIL'),
            ('pandas', 'pandas')
        ]
        
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        
        # Rutas para herramientas incluidas en el proyecto (aut√≥nomas)
        self.tesseract_portable = os.path.join(self.script_dir, 'tesseract', 'tesseract.exe')
        self.tessdata_path = os.path.join(self.script_dir, 'tessdata')
        self.poppler_path = os.path.join(self.script_dir, 'poppler', 'Library', 'bin')
        
        # Rutas de sistema como fallback
        self.rutas_tesseract_sistema = [
            r"C:\Program Files\Tesseract-OCR\tesseract.exe",
            r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
            r"C:\Tesseract-OCR\tesseract.exe"
        ]

    def instalar_tesseract_automatico(self):
        """Descarga e instala Tesseract OCR autom√°ticamente"""
        print("üîÑ Descargando Tesseract OCR...")
        
        # URL del instalador oficial de Tesseract
        tesseract_url = "https://github.com/UB-Mannheim/tesseract/releases/download/v5.4.0.20240606/tesseract-ocr-w64-setup-5.4.0.20240606.exe"
        
        try:
            # Crear directorio temporal
            with tempfile.TemporaryDirectory() as temp_dir:
                installer_path = os.path.join(temp_dir, "tesseract_installer.exe")
                
                # Descargar instalador
                print("üì• Descargando instalador desde GitHub...")
                urllib.request.urlretrieve(tesseract_url, installer_path)
                
                if not os.path.exists(installer_path):
                    print("‚ùå Error: No se pudo descargar el instalador")
                    return False
                
                print("‚úÖ Instalador descargado correctamente")
                
                # Mostrar di√°logo de confirmaci√≥n
                root = tk.Tk()
                root.withdraw()
                
                respuesta = messagebox.askyesno(
                    "Instalar Tesseract OCR",
                    "Se ha descargado el instalador oficial de Tesseract OCR.\n\n" +
                    "¬øDesea ejecutar la instalaci√≥n?\n\n" +
                    "IMPORTANTE: Se requerir√°n permisos de administrador.",
                    icon='question'
                )
                
                root.destroy()
                
                if not respuesta:
                    print("‚ùå Instalaci√≥n cancelada por el usuario")
                    return False
                
                # Ejecutar instalador
                print("üîß Ejecutando instalador de Tesseract...")
                print("   (Se abrir√° ventana de instalaci√≥n)")
                
                resultado = subprocess.run([
                    installer_path,
                    "/S",  # Instalaci√≥n silenciosa
                    "/D=C:\\Program Files\\Tesseract-OCR"  # Directorio de instalaci√≥n
                ], capture_output=False)
                
                if resultado.returncode == 0:
                    print("‚úÖ Tesseract OCR instalado correctamente")
                    
                    # Verificar instalaci√≥n
                    if self.verificar_tesseract()[0]:
                        print("‚úÖ Instalaci√≥n verificada exitosamente")
                        return True
                    else:
                        print("‚ö†Ô∏è Instalaci√≥n completada pero no se puede verificar")
                        return False
                else:
                    print(f"‚ùå Error en instalaci√≥n (c√≥digo: {resultado.returncode})")
                    return False
                    
        except Exception as e:
            print(f"‚ùå Error instalando Tesseract: {e}")
            return False

    def verificar_python_packages(self):
        """Verifica qu√© paquetes de Python est√°n instalados"""
        faltantes = []
        instalados = []
        
        for nombre_pip, nombre_import in self.dependencias_python:
            try:
                spec = importlib.util.find_spec(nombre_import)
                if spec is not None:
                    instalados.append(nombre_pip)
                else:
                    faltantes.append(nombre_pip)
            except ImportError:
                faltantes.append(nombre_pip)
        
        return instalados, faltantes

    def verificar_tesseract(self):
        """Verifica si Tesseract est√° disponible (portable o sistema)"""
        
        # Primero verificar la versi√≥n portable incluida en el proyecto
        if os.path.exists(self.tesseract_portable):
            return True, self.tesseract_portable
        
        # Si no existe la portable, buscar en el sistema
        for ruta in self.rutas_tesseract_sistema:
            if os.path.exists(ruta):
                return True, ruta
                
        return False, None

    def verificar_tessdata(self):
        """Verifica si est√°n los archivos de idioma espa√±ol"""
        spa_file = os.path.join(self.tessdata_path, 'spa.traineddata')
        eng_file = os.path.join(self.tessdata_path, 'eng.traineddata')
        
        return {
            'spa': os.path.exists(spa_file),
            'eng': os.path.exists(eng_file),
            'tessdata_exists': os.path.exists(self.tessdata_path)
        }

    def verificar_poppler(self):
        """Verifica si Poppler est√° disponible"""
        return os.path.exists(self.poppler_path)

    def instalar_packages_python(self, packages):
        """Instala paquetes de Python usando pip"""
        resultados = []
        
        for package in packages:
            try:
                print(f"üîÑ Instalando {package}...")
                resultado = subprocess.run([
                    sys.executable, "-m", "pip", "install", package
                ], capture_output=True, text=True, check=True)
                
                resultados.append((package, True, "Instalado correctamente"))
                print(f"‚úÖ {package} instalado correctamente")
                
            except subprocess.CalledProcessError as e:
                resultados.append((package, False, f"Error: {e.stderr}"))
                print(f"‚ùå Error instalando {package}: {e.stderr}")
        
        return resultados

    def verificacion_completa(self):
        """Realiza verificaci√≥n completa del sistema"""
        print("üîç VERIFICACI√ìN COMPLETA DEL SISTEMA")
        print("=" * 50)
        
        # Python packages
        instalados, faltantes = self.verificar_python_packages()
        print(f"\nüì¶ PAQUETES PYTHON:")
        for pkg in instalados:
            print(f"  ‚úÖ {pkg}")
        for pkg in faltantes:
            print(f"  ‚ùå {pkg} (FALTANTE)")
        
        # Tesseract
        tesseract_ok, tesseract_path = self.verificar_tesseract()
        print(f"\nüîß TESSERACT OCR:")
        if tesseract_ok:
            print(f"  ‚úÖ Encontrado en: {tesseract_path}")
        else:
            print(f"  ‚ùå NO ENCONTRADO")
        
        # Tessdata
        tessdata_info = self.verificar_tessdata()
        print(f"\nüìö ARCHIVOS DE IDIOMA:")
        print(f"  {'‚úÖ' if tessdata_info['tessdata_exists'] else '‚ùå'} Carpeta tessdata")
        print(f"  {'‚úÖ' if tessdata_info['spa'] else '‚ùå'} Espa√±ol (spa.traineddata)")
        print(f"  {'‚úÖ' if tessdata_info['eng'] else '‚ùå'} Ingl√©s (eng.traineddata)")
        
        # Poppler
        poppler_ok = self.verificar_poppler()
        print(f"\nüñºÔ∏è POPPLER (PDF a imagen):")
        print(f"  {'‚úÖ' if poppler_ok else '‚ùå'} {'Disponible' if poppler_ok else 'NO ENCONTRADO'}")
        
        return {
            'python_faltantes': faltantes,
            'tesseract_ok': tesseract_ok,
            'tesseract_path': tesseract_path,
            'tessdata_info': tessdata_info,
            'poppler_ok': poppler_ok
        }

    def mostrar_dialogo_instalacion(self, verificacion):
        """Muestra di√°logo para confirmar instalaci√≥n"""
        if not verificacion['python_faltantes'] and verificacion['tesseract_ok'] and verificacion['tessdata_info']['spa'] and verificacion['tessdata_info']['eng']:
            return True  # Todo est√° bien
        
        # Crear ventana de di√°logo
        root = tk.Tk()
        root.withdraw()  # Ocultar ventana principal
        
        mensaje = "üîß INSTALACI√ìN REQUERIDA\n\n"
        mensaje += "Se detectaron dependencias faltantes:\n\n"
        
        if verificacion['python_faltantes']:
            mensaje += f"üì¶ Paquetes Python faltantes:\n"
            for pkg in verificacion['python_faltantes']:
                mensaje += f"   ‚Ä¢ {pkg}\n"
            mensaje += "\n"
        
        if not verificacion['tesseract_ok']:
            mensaje += "üîß Tesseract OCR no encontrado\n"
            mensaje += "   (Se descargar√° e instalar√° autom√°ticamente)\n\n"
        
        if not verificacion['tessdata_info']['spa']:
            mensaje += "üìö Archivo de idioma espa√±ol faltante\n\n"
        
        mensaje += "¬øDesea proceder con la instalaci√≥n autom√°tica?"
        
        respuesta = messagebox.askyesno(
            "Instalaci√≥n Requerida", 
            mensaje,
            icon='question'
        )
        
        root.destroy()
        return respuesta

    def instalar_automatico(self, modo_auto=False):
        """Proceso completo de instalaci√≥n autom√°tica"""
        print("üöÄ INICIANDO INSTALACI√ìN AUTOM√ÅTICA")
        print("=" * 50)
        
        verificacion = self.verificacion_completa()
        
        # Solo instalar paquetes Python faltantes y Tesseract si es necesario
        instalacion_exitosa = True
        
        if verificacion['python_faltantes'] or not verificacion['tesseract_ok']:
            if modo_auto:
                # Instalaci√≥n autom√°tica sin di√°logos
                print("üîÑ Modo autom√°tico activado - procediendo sin confirmaci√≥n...")
                confirmar = True
            else:
                confirmar = self.mostrar_dialogo_instalacion(verificacion)
                
            if not confirmar:
                print("‚ùå Instalaci√≥n cancelada por el usuario")
                return False
            
            # Instalar paquetes Python faltantes
            if verificacion['python_faltantes']:
                print(f"\nüîÑ Instalando {len(verificacion['python_faltantes'])} paquetes Python...")
                resultados = self.instalar_packages_python(verificacion['python_faltantes'])
                
                exitosos = sum(1 for _, exito, _ in resultados if exito)
                print(f"\nüìä RESULTADOS PYTHON: {exitosos}/{len(resultados)} paquetes instalados")
                
                if exitosos != len(resultados):
                    instalacion_exitosa = False
            
            # Instalar Tesseract si falta
            if not verificacion['tesseract_ok']:
                print(f"\nüîß Instalando Tesseract OCR...")
                if self.instalar_tesseract_automatico():
                    print("‚úÖ Tesseract OCR instalado correctamente")
                else:
                    print("‚ùå Error instalando Tesseract OCR")
                    instalacion_exitosa = False
        
        if instalacion_exitosa:
            print("‚úÖ ¬°Instalaci√≥n completada exitosamente!")
        else:
            print("‚ö†Ô∏è Algunas instalaciones no se completaron correctamente")
        
        return instalacion_exitosa

def main():
    """Funci√≥n principal"""
    instalador = InstaladorDependencias()
    
    if len(sys.argv) > 1 and sys.argv[1] == '--verificar':
        # Solo verificar
        instalador.verificacion_completa()
    elif len(sys.argv) > 1 and sys.argv[1] == '--auto':
        # Instalaci√≥n autom√°tica sin di√°logos
        instalador.instalar_automatico(modo_auto=True)
    else:
        # Instalaci√≥n autom√°tica con di√°logos
        instalador.instalar_automatico(modo_auto=False)

if __name__ == "__main__":
    main()